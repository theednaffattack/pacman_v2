import { GridPointClass } from "./a-star";

export let levelOneMap = [
  ["1", "-", "-", "-", "-", "-", "-", "-", "-", "-", "2"],
  ["|", ".", ".", ".", ".", ".", ".", ".", ".", ".", "|"],
  ["|", ".", "b", ".", "[", "7", "]", ".", "b", ".", "|"],
  ["|", ".", ".", ".", ".", "_", ".", ".", ".", ".", "|"],
  ["|", ".", "[", "]", ".", ".", ".", "[", "]", ".", "|"],
  ["|", ".", ".", ".", ".", "^", ".", ".", ".", ".", "|"],
  ["|", ".", "b", ".", "[", "+", "]", ".", "b", ".", "|"],
  ["|", ".", ".", ".", ".", "_", ".", ".", ".", ".", "|"],
  ["|", ".", "[", "]", ".", ".", ".", "[", "]", ".", "|"],
  ["|", ".", ".", ".", ".", "^", ".", ".", ".", ".", "|"],
  ["|", ".", "b", ".", "[", "5", "]", ".", "b", ".", "|"],
  ["|", ".", ".", ".", ".", ".", ".", ".", ".", "p", "|"],
  ["4", "-", "-", "-", "-", "-", "-", "-", "-", "-", "3"],
];

// 22 columns x 31 rows
// prettier-ignore
export let levelTwoMap = [
["1","-","-","-","-","-","-","-","-","-","-","-","-","to","-","-","-","-","-","-","-","-","-","-","-","-","2",],
["|",".",".",".",".",".",".",".",".",".",".",".",".","|",".",".",".",".",".",".",".",".",".",".",".",".","|",],
["|",".","ul","to","to","ur",".","ul","to","to","to","ur",".","|",".","ul","to","to","to","ur",".","ul","to","to", "ur", ".", "|"],
["|",".","lo"," "," ","ro",".","lo"," "," "," ","ro",".","|",".","lo"," "," "," ","ro",".","lo", " ", " ", "ro", ".", "|"],
["|","p","bl","bo","bo","br",".","bl","bo","bo","bo","br",".","_",".","bl","bo","bo","bo","br", ".", "bl", "bo", "bo", "br", "p","|",],
["|",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","|",],
["|",".","[","-","-","]",".","^",".","ul","to","to","to","to","to","to","to","ur",".","^",".","[","-","-","]",".","|",],
["|",".",".",".",".",".",".","|",".","bl","bo","bo"," "," "," ","bo","bo","br",".","|",".",".",".",".",".",".","|",],
["4","-","-","-","-","2",".","|",".",".",".",".","lo"," ","ro",".",".",".",".","|",".","1","-","-","-","-","3",],
[""," "," "," "," ","|",".","6","-","-","]",".","bl","bo","br",".","[","-","-","8",".","|"," "," "," "," ",],
[" "," "," "," "," ","|",".","|",".",".",".",".",".",".",".",".",".",".",".","|",".","|"," "," "," "," "," ",],
[" "," "," "," "," ","|",".","|",".","1","-","]","gg","gg","gg","[", "-","2",".","|",".","|"," "," "," "," "," "],
["[","-","-","-","-","3",".","_",".","|"," "," "," "," "," "," "," ","|",".","_",".","4","-","-","-","-","]"],
[".",".",".",".",".",".",".",".",".","|"," "," "," ","."," "," "," ","|",".",".",".",".",".",".",".",".",".",],
["[","-","-","-","-","2",".","^",".","|"," "," "," "," "," "," "," ","|",".","^",".","1","-","-","-","-","]"],
[" "," "," "," "," ","|",".","|",".","4","-","-","-","-","-","-","-","3",".","|",".","|"," "," "," "," "," ",],
[" "," "," "," "," ","|",".","|",".",".",".",".",".",".",".",".",".",".",".","|",".","|"," "," "," "," ",],
[" "," "," "," "," ","|",".","|",".","ul","to","to","to","to","to","to","to","ur",".","|",".","|"," "," "," "," ",],
["1","-","-","-","-","3",".","_",".","bl","bo","bo"," "," "," ","bo","bo","br",".","_",".","4","-","-","-","-","2"],
["|",".",".",".",".",".",".",".",".",".",".",".","lo"," ","ro",".",".",".",".",".",".",".",".",".",".",".","|",],
["|",".","[","-","-","2",".","[","-","-","]",".","bl","bo","br",".","[","-","-","]",".","1","-","-","]",".","|",],
["|","p",".",".",".","|",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","|",".",".",".","p","|",],
["lo","to","to","ur",".","|",".","^",".","ul","to","to","to","to","to","to","to","ur",".","^",".","|",".","ul","to","to","ro",],
["lo","bo","bo","br",".","_",".","|",".","bl","bo","bo"," "," "," ","bo","bo","br",".","|",".","_",".","bl","bo","bo","ro",],
["|",".",".",".",".",".",".","|",".",".",".",".","lo"," ","ro",".",".",".",".","|",".",".",".",".",".",".","|",],
["|",".","[","-","-","-","-","5","-","-","]",".","bl","bo","br",".","[","-","-","5","-","-","-","-","]",".","|",],
["|",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".",".","|",],
["4","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","-","3",],
];

function convertSymbolMapToGridNodeMap({ map }: { map: string[][] }) {
  let gridNodeMap: GridPointClass[][] = [];

  for (let rowIndex = 0; rowIndex < map.length; rowIndex++) {
    const row = map[rowIndex];
    for (let colIndex = 0; colIndex < row.length; colIndex++) {
      const cell = row[colIndex];
      // Evaluate and convert cell here
      const what: GridPointClass = {};
      // Push converted cell into 'gridNodeMap'
      gridNodeMap[rowIndex][colIndex] = cell;
    }
    // TODO: Save to disk for easy testing / confirmation
    // TODO: actually works? Maybe

    // Return the converted map here
  }
}
